name: Vercel Production Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches:
      - main
jobs:
  Deploy-Production:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            ${{ github.workspace }}/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: echo "url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Notify Mattermost
        if: always()
        run: |
          STATUS="${{ steps.deploy.outcome }}"
          MESSAGE="Production Deployment to [next-gen.kthais.com](https://next-gen.kthais.com) "
          if [ "$STATUS" == "success" ]; then
            MESSAGE+="✅ succeeded"
          else
            MESSAGE+="❌ failed"
          fi
          MESSAGE+="\nCommit: \`${{ github.sha }}\`"
          
          curl -i -X POST \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ secrets.MATTERMOST_GH_ACTIONS_TOKEN }}" \
            -d "{
              \"channel_id\": \"${{ secrets.MATTERMOST_TEAM_IT_CHANNELID }}\",
              \"message\": \"${MESSAGE}\"
            }" \
            "${{ secrets.MATTERMOST_URL }}/api/v4/posts"

      - name: Create GitHub Deployment
        if: steps.deploy.outcome == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            const deploymentUrl = process.env.DEPLOYMENT_URL;

            // Create deployment
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'Production',
              auto_merge: false,
              required_contexts: [],
              description: 'Vercel Production Deployment'
            });

            // Set deployment status to success
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: deploymentUrl,
              log_url: deploymentUrl,
              description: 'Deployment successful!'
            });
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.url }}
